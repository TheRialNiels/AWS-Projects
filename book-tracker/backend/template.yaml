AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM Template for Book Tracker App

Parameters:
  AppName:
    Type: String
    Default: book-tracker-app
    Description: Application name
  AllowOrigin:
    Type: String
    Default: "'*'"
    Description: Define the allow origin for CORS
  AllowCredentials:
    Type: String
    Default: 'true'
    Description: Boolean variable to specify credentials for CORS headers
  Environment:
    Type: String
    Default: prod
    Description: Define the runtime environment for the application
    MinLength: 3
  BookHandlersPath:
    Type: String
    Default: src/handlers/v1/books

Globals:
  Function:
    Architectures:
      - x86_64
    Runtime: nodejs22.x
    CodeUri: .
    Timeout: 60
    Environment:
      Variables:
        ALLOW_ORIGIN: !Ref AllowOrigin
        ALLOW_CREDENTIALS: !Ref AllowCredentials
        REGION: !Sub ${AWS::Region}
        ENVIRONMENT: !Ref Environment
        BOOKS_TABLE: !Ref BooksTable
        BOOKS_TITLE_GSI: TitleIndex
        BOOKS_AUTHOR_GSI: AuthorIndex

Resources:
  BookTrackerAppApiGW:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${Environment}-${AppName}-api
      Description: API Gateway for Book Tracker App Endpoints
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !Ref AllowOrigin

  BooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-${AppName}-books-table
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: title
          AttributeType: S
        - AttributeName: author
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TitleIndex
          KeySchema:
            - AttributeName: title
              KeyType: HASH
            - AttributeName: author
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: AuthorIndex
          KeySchema:
            - AttributeName: author
              KeyType: HASH
            - AttributeName: title
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  CreateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-${AppName}-create-book
      Description: Create book record in database
      Handler: !Sub ${BookHandlersPath}/createBook.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref BookTrackerAppApiGW
            Path: /v1/books
            Method: POST
      Policies:
        Statement:
          - Sid: DynamoDBWrite
            Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource: !GetAtt BooksTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        OutExtension:
          - .js=.mjs
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - !Sub ${BookHandlersPath}/createBook.ts
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  GetAllBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-${AppName}-get-all-books
      Description: Get all books records in database
      Handler: !Sub ${BookHandlersPath}/getAllBooks.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref BookTrackerAppApiGW
            Path: /v1/books
            Method: GET
      Policies:
        Statement:
          - Sid: DynamoDBRead
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource: !GetAtt BooksTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        OutExtension:
          - .js=.mjs
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - !Sub ${BookHandlersPath}/getAllBooks.ts
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  GetBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-${AppName}-get-book
      Description: Get book record in database
      Handler: !Sub ${BookHandlersPath}/getBook.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref BookTrackerAppApiGW
            Path: /v1/books/{id}
            Method: GET
      Policies:
        Statement:
          - Sid: DynamoDBRead
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !GetAtt BooksTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        OutExtension:
          - .js=.mjs
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - !Sub ${BookHandlersPath}/getBook.ts
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  UpdateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-${AppName}-update-book
      Description: Update book record in database
      Handler: !Sub ${BookHandlersPath}/updateBook.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref BookTrackerAppApiGW
            Path: /v1/books/{id}
            Method: PATCH
      Policies:
        Statement:
          - Sid: DynamoDBUpdate
            Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource: !GetAtt BooksTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        OutExtension:
          - .js=.mjs
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - !Sub ${BookHandlersPath}/updateBook.ts
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  DeleteBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-${AppName}-delete-book
      Description: Delete book record in database
      Handler: !Sub ${BookHandlersPath}/deleteBook.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref BookTrackerAppApiGW
            Path: /v1/books/{id}
            Method: DELETE
      Policies:
        Statement:
          - Sid: DynamoDBDelete
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
            Resource: !GetAtt BooksTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        OutExtension:
          - .js=.mjs
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - !Sub ${BookHandlersPath}/deleteBook.ts
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

Outputs:
  BookTrackerAppApiGW:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${BookTrackerAppApiGW}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
  CreateBookFunction:
    Description: 'Create Book Lambda Function ARN'
    Value: !GetAtt CreateBookFunction.Arn
  GetAllBooksFunction:
    Description: 'Get All Books Lambda Function ARN'
    Value: !GetAtt GetAllBooksFunction.Arn
  GetBookFunction:
    Description: 'Get Book Lambda Function ARN'
    Value: !GetAtt GetBookFunction.Arn
  UpdateBookFunction:
    Description: 'Update Book Lambda Function ARN'
    Value: !GetAtt UpdateBookFunction.Arn
  DeleteBookFunction:
    Description: 'Delete Book Lambda Function ARN'
    Value: !GetAtt DeleteBookFunction.Arn
